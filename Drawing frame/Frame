.model tiny
.code

VIDEOSEC	equ 0b800h
GLOBALFRAMELEN	equ 160
WORDLEN		equ 2
MAXSIZE		equ 80
SUBUP		equ 1
SUBLEFT		equ 10
SUBOFFSET	equ 5
TOWORD		equ 2

CENTER		equ 160*10 + 2*40

LEFTHIGH	equ 0000
RIGHTDOWN	equ 184fh
BGCOLOR		equ 07h

DURATION	equ 0ffh

Lefthighcorner	equ 0dc9h
Horisontal	equ 0dcdh
Righthighcorner	equ 0dbbh
Leftlowcorner	equ 0dc8h
Vertical	equ 0dbah
Rightlowcorner	equ 0dbch
Theshadow	equ 07fb1h

org 100h
Start:		
		call DRAWFRAME

		mov ax, 4c00h
		int 21h


DRAWFRAME	proc
	
GO:		cmp Thecolumbytelen, MAXSIZE
		je ENDFILE

		call CLEANSCREEN		

		mov bx, VIDEOSEC
		mov es, bx

		call FINDPLACE
		mov bx, ax
		
		mov ax, Lefthighcorner
		call PRINTSYMBOL

		mov ax, Horisontal
		call LINE

		mov ax, Righthighcorner
		call PRINTSYMBOL

		call BORDERS

		mov ax, Leftlowcorner
		call PRINTSYMBOL

		mov ax, Horisontal
		call LINE

		mov ax, Rightlowcorner
		call PRINTSYMBOL
		
		call PRINTSHADOW

		call NEXTFRAMEPOSITION

		call DELAY

		jmp GO
		
ENDFILE:	call PRINTMESSAGE		
		
		ret	
DRAWFRAME	endp



;prints the line of symbols we put in stack
;ax, cx, dx spoiled
LINE		proc near

		mov cx, Thecolumbytelen

LINECYC:	call GONEXT

		call PRINTSYMBOL

		loop LINECYC

		ret
LINE		endp






;puts the borders of the frame with definite symbol
;cx spoiled
BORDERS		proc near
		mov cx, Thelinebytelen

BORDCYC:	push cx
		call NEXTLINE
		
		mov ax, Vertical
		call PRINTSYMBOL

		add bx, Thecolumn

		mov ax, Vertical
		call PRINTSYMBOL

		pop cx
		cmp cx, Thelinebytelen
		push cx
		jne SHADOW
BACK:		pop cx
		loop BORDCYC
		
		call NEXTLINE
		
		ret

SHADOW:		call GONEXT

		mov ax, Theshadow
		call PRINTSYMBOL

		call GOBACK

		jmp BACK

BORDERS		endp




;prints the lowest shadow
PRINTSHADOW	proc

		call GONEXT		

		mov ax, Theshadow
		call PRINTSYMBOL

		sub bx, WORDLEN
		
		call NEXTLINE

		call GONEXT

		mov ax, Theshadow
		call LINE

		dec Upoffset
		call FINDPLACE
		mov bx, ax

		call GOBACK

		ret
PRINTSHADOW	endp





;sets the variable Where on the next line and the same column
NEXTLINE	proc near

		inc Upoffset
		call FINDPLACE
		mov bx, ax		
		
		ret
NEXTLINE	endp




;moves Where to the next word
GONEXT		proc
		add bx, WORDLEN

		ret
GONEXT		endp





;moves Where to the previous word
GOBACK		proc
		sub bx, WORDLEN

		ret
GOBACK		endp






;sets Where to the place on the screen according to Upoffset and Leftoffset
;ax, cx, dx spoiled
;result in ax 
FINDPLACE	proc near
		push bx
		mov ax, Leftoffset
		mov cx, WORDLEN
		mul cx
	
		mov bx, ax
		
		mov ax, Upoffset
		mov cx, GLOBALFRAMELEN
		mul cx
		
		add ax, bx
		pop bx

		ret
FINDPLACE	endp







;prints the symbol that was put in stack
;ax, dx are spoiled
PRINTSYMBOL	proc near

		mov es:[bx], ax

		ret
PRINTSYMBOL	endp





;ax, cx are spoiled
NEXTFRAMEPOSITION 	proc
			
			add Thecolumbytelen, SUBLEFT
			add Thelinebytelen, SUBUP
		
			mov ax, Thecolumbytelen
			mov cx, TOWORD		
			mul cx
			mov Thecolumn, ax

			mov ax, Thelinebytelen
			mov cx,TOWORD		
			mul cx
			mov Theline, ax 

			sub Leftoffset, SUBOFFSET
			mov cx, Thelinebytelen
			sub Upoffset, cx
			sub Upoffset, 1

			ret
NEXTFRAMEPOSITION 	endp






;cleans the screen
CLEANSCREEN	proc near
		
		mov ax, 0600h
		mov bh, BGCOLOR
		mov cx, LEFTHIGH
		mov dx, RIGHTDOWN	
		int 10h

		ret
CLEANSCREEN	endp







;delays the work of program on abt 0.5 seconds
;cx, dx are spoiled
DELAY		proc near
		
		mov cx, DURATION
OUTCYCLE:	mov dx, DURATION
INNING:		cmp dx, 0
		je STOP
		dec dx
		jmp INNING
STOP:		loop OUTCYCLE
		

		ret
DELAY		endp







;prints the whole message by addressing to videomemory
PRINTMESSAGE	proc

		mov bx, offset Message
		mov si, bx
		mov dx, CENTER
		sub dx, MesLen
			
		mov bx, dx

THEPRINTING:	mov ah, 0dh
		mov si, offset Message
		mov di, 0b800h
		mov es, di
			
		mov di, bx
		cld

PRINTINGCYCLE:	lodsb
		cmp al, '$'
		je DOBREAK
		stosw
		jmp PRINTINGCYCLE

DOBREAK:	ret
PRINTMESSAGE	endp







;variables
Counter		dw 8
Message		db, 'The End.', '$'
MesLen		dw $-Message

Thecolumn	dw 40	;need to get rid of them
Thecolumbytelen	dw 20	;
Theline		dw 8	;
Thelinebytelen	dw 4	;
;Where		dw 0

Leftoffset	dw 30
Upoffset	dw 10

End		Start
		
