.model tiny
.code
.386

VIDEOSEC			equ 0b800h
GLOBALFRAMELEN		equ 160
WORDLEN				equ 2
MAXSIZE				equ 80
SUBUP				equ 1
SUBLEFT				equ 5
SUBOFFSET			equ 5
TOWORD				equ 2

MAXLEN				equ 160
MAXWIDTH			equ 40

CENTER				equ 160*5 + 2*8

LEFTHIGHCORN		equ 0000
RIGHTDOWNCORN		equ 184fh
BGCOLOR				equ 07h

DURATION			equ 0ffh

left_high_corner	equ 0dc9h
horisontal			equ 0dcdh
right_high_corner	equ 0dbbh
left_low_corner		equ 0dc8h
vertical			equ 0dbah
right_low_corner	equ 0dbch
the_filling			equ 00bch
the_shadow			equ 07fb1h

left_offset			equ 3
up_offset			equ 3

number_to_convert 	equ 0edah

org 100h
Start:		
		call CLEANSCREEN

		mov ax, up_offset
		mov dx, left_offset
		
		push ax dx 36 34
		call ANIMATION
		add sp, 4 * 2


		xor al, al
		mov ah, 086h
		mov cx, 1h
		mov dx, 3e8h
		int 15h
		
		push MesLen_16 offset Message_16 30 4 4 4
		call PRINT_ANIMATED_NUMBER_BOX
		add sp, 6 * 2

		push number_to_convert 5 5 0Fh 4
		call BIT_CONVERTER
		add sp, 5 * 2

		push MesLen_8 offset Message_8 30 4 4 8
		call PRINT_ANIMATED_NUMBER_BOX
		add sp, 6 * 2

		push number_to_convert 9 5 07h 3
		call BIT_CONVERTER
		add sp, 5 * 2

		push MesLen_2 offset Message_2 30 4 4 12
		call PRINT_ANIMATED_NUMBER_BOX
		add sp, 6 * 2

		push number_to_convert 13 5 01h 1
		call BIT_CONVERTER
		add sp, 5 * 2


		push MesLen_10 offset Message_10 30 4 4 16
		call PRINT_ANIMATED_NUMBER_BOX
		add sp, 6 * 2
		
		push number_to_convert 17 5
		call CONVERTER_10
		add sp, 3 * 2

		xor al, al
		mov ah, 086h
		mov cx, 1h
		mov dx, 3e8h
		int 15h

		mov ax, 4c00h
		int 21h

;prints animated box and the name of notation of the number in it
;ax, cx, dx are spoiled.
PRINT_ANIMATED_NUMBER_BOX proc y_box_coord, x_box_coord, v_size, h_size, message, meslen
				push bp
				mov bp, sp

				push y_box_coord
				push x_box_coord
				push h_size
				push v_size
				call ANIMATION
				add sp, 4 * 2

				
				xor al, al
				mov ah, 086h
				mov cx, 1h
				mov dx, 3e8h
				int 15h
				;call DELAY

				inc x_box_coord

				push y_box_coord 
				push x_box_coord 
				push meslen 
				push message
				call PRINTMESSAGE
				add sp, 4 * 2

				pop bp
				ret
PRINT_ANIMATED_NUMBER_BOX endp

;converts number in the notation in parameters
;ax, di, cx, dx are spoiled
BIT_CONVERTER	proc system_to_convert, convertion_mask, x_coordinate, y_coordinate, bit_number

				push bp
				mov bp, sp
				push cx
				
				mov di, VIDEOSEC
				mov es, di
				
				push ax
				push cx
				; push y_coordinate
				; push x_coordinate
				mov ax, x_coordinate
				mov cx, y_coordinate
				call FINDPLACE
				;add sp, 2 * 2
				mov di, ax

				pop cx
				pop ax

				mov dx, bit_number
				xor cx, cx

				std
CONTINUE_COUNTING:
				
				mov ax, dx
				and ax, convertion_mask

				push cx

				mov cl, byte ptr system_to_convert
				shr dx, cl

				pop cx
				inc cx

				cmp dx, 0
				ja CONTINUE_COUNTING


				mov dx, bit_number
				add di, cx
				add di, cx
CONTINUE_CONVERTING_16:
				
				mov ax, dx
				and ax, convertion_mask

				mov ah, 0dh

				cmp al, 9
				ja ADD_LETTER
				add al, '0'
				jmp GO_AWAY
ADD_LETTER:		add al, 'A' - 10
GO_AWAY:
				int 3
				stosw
				
				mov cl, byte ptr system_to_convert
				shr dx, cl

				cmp dx, 0
				ja CONTINUE_CONVERTING_16

				pop cx
				pop bp
				
				ret
BIT_CONVERTER	endp


CONVERTER_10	proc x_coordinate, y_coordinate, the_number

				push bp
				mov bp, sp
				push cx
				
				mov di, VIDEOSEC
				mov es, di
				
				push ax
				push cx
				; push y_coordinate
				; push x_coordinate
				mov ax, x_coordinate
				mov cx, y_coordinate
				call FINDPLACE
				;add sp, 2 * 2
				mov di, ax

				pop cx
				pop ax

				mov ax, the_number
				xor cx, cx

				std
CONTINUE_COUNTING_DIJITS:
				
				push cx
				
				xor dx, dx
				mov bx, 10
				div bx

				pop cx
				inc cx

				cmp ax, 0
				ja CONTINUE_COUNTING_DIJITS


				mov ax, the_number
				add di, cx
				add di, cx
CONTINUE_CONVERTING_10:
				
				xor dx, dx
				mov bx, 10
				div bx
				
				push ax
				mov ax, dx
				mov ah, 0dh

				add al, '0'
				int 3
				stosw
				
				pop ax
				cmp ax, 0
				ja CONTINUE_CONVERTING_10

				pop cx
				pop bp
				
				ret
CONVERTER_10	endp		

;saves maximum in ax
MAXIMUM		proc 
			
			cmp cx, dx
			jae FIRST_BIGGER

SECOND_BIGGER:
			mov ax, dx
			jmp END_MAX

FIRST_BIGGER:	
			mov ax, cx

END_MAX:	ret
MAXIMUM		endp



;draws animated frame
;ax, bx, cx, dx are spoiled
ANIMATION	proc Frame_Height, Frame_Width, Point_x, Point_y

			push bp
			mov bp, sp

			mov ax, Frame_Height
			shr ax, 1				;ax = Frame_Height/2
			push ax					;ax = bp - 2

			mov ax, Frame_Width
			shr ax, 1				;ax = Frame_Width/2
			push ax

			mov cx, Frame_Width
			mov dx, Frame_Height
			call MAXIMUM
			
			mov cx, ax

			mov dx, 1				;current width
			mov ax, 1				;current height

ANIMATION_LOOP:	
			push dx
			push ax
			push cx

			push Point_y
			push Point_x
			push ax
			push dx
			call DRAWFRAME
			add sp, 4 * 2 

			pop cx
			pop ax
			pop dx

			cmp ax, [bp-2]
			
			jae NEXT_CMP
 
MOVE_UP:	inc ax
			
NEXT_CMP:	cmp dx, [bp-4]
			
			jae END_CMP

MOVE_LEFT:	inc dx

END_CMP:
			int 3

			push ax
			push cx
			push dx


			xor al, al
			mov ah, 086h
			mov cx, 1h
			mov dx, 3e8h
			int 15h

			pop dx
			pop cx
			pop ax

			loop ANIMATION_LOOP	

			pop ax
			pop ax
			pop bp
			
			ret
ANIMATION	endp


DRAWFRAME	proc Thelength, Thewidth, Theleft_offset, Theup_offset
		push bp
		mov bp, sp

		mov bx, VIDEOSEC
		mov es, bx

		push Theup_offset
		push Theleft_offset
		push Thelength
		push right_high_corner
		push horisontal
		push left_high_corner
		call LINE
		add sp, 6 * 2

		mov cx, Thewidth

STARTLOOP:	
		inc Theup_offset

		push cx

		push Theup_offset
		push Theleft_offset
		push Thelength
		push vertical
		push the_filling
		push vertical
		call LINE
		add sp, 6 * 2

		call GONEXT
		mov ax, the_shadow
		call PRINTSYMBOL

		pop cx
		loop STARTLOOP


		push Theup_offset
		push Theleft_offset
		push Thelength
		push right_low_corner
		push horisontal
		push left_low_corner
		call LINE
		add sp, 6 * 2	

		call GONEXT
		mov ax, the_shadow
		call PRINTSYMBOL

		inc Theleft_offset
		inc Theup_offset

		push Theup_offset
		push Theleft_offset
		push Thelength
		push the_shadow
		push the_shadow
		push the_shadow
		call LINE
		add sp, 6 * 2	
		
		pop bp	
		
		ret	
DRAWFRAME	endp



;prints the line of symbols we put in stack
;ax, cx, dx spoiled
LINE		proc Left, Thehorisontalsymb, Right, Thelen, Theleft_offset, Theup_offset
		
			push bp
			mov bp, sp

			push ax
			push cx

			mov ax, Theleft_offset
			mov cx, Theup_offset	
			call FINDPLACE
			
			mov bx, ax

			pop cx
			pop ax

			mov cx, Thelen
			
			mov ax, Left
			call PRINTSYMBOL

			mov ax, Thehorisontalsymb
			
LINECYC:	
			call GONEXT

			call PRINTSYMBOL
			loop LINECYC

			mov ax, Right
			call PRINTSYMBOL

			pop bp

			ret
LINE		endp



;moves Where to the next word
GONEXT		proc
			add bx, WORDLEN

			ret
GONEXT		endp




;moves Where to the previous word
GOBACK		proc
			sub bx, WORDLEN

			ret
GOBACK		endp



;sets Where to the place on the screen according to up_offset and left_offset
;ax, cx, dx spoiled
;result in ax 
FINDPLACE	proc 
			
			push bx
			
			mov bx, WORDLEN
			mul bx
		
			mov bx, ax
			
			mov ax, cx
			
			mov cx, GLOBALFRAMELEN
			mul cx
			
			add ax, bx
			pop bx
			
			ret
FINDPLACE	endp




;prints the symbol that was put in stack
;ax, dx are spoiled
PRINTSYMBOL	proc near
		mov es:[bx], ax

		ret
PRINTSYMBOL	endp

;cleans the screen
;ax, bx, cx, dx are spoiled
CLEANSCREEN	proc near
		mov ax, 0600h
		mov bh, BGCOLOR
		mov cx, LEFTHIGHCORN
		mov dx, RIGHTDOWNCORN	
		int 10h

		ret
CLEANSCREEN	endp




;delays the work of program on abt 0.5 seconds
;cx, dx are spoiled
DELAY		proc near
		
			mov cx, DURATION
OUTCYCLE:	mov dx, DURATION
INNING:		cmp dx, 0
			je STOP
			dec dx
			jmp INNING
STOP:		loop OUTCYCLE
		

			ret
DELAY		endp




;prints the whole message by addressing to videomemory
;ax, bx, di, si are spoiled
PRINTMESSAGE	proc Message_offset, MesLen, place_x, place_y
			push bp
			mov bp, sp
			
			push ax
			push cx
			
			mov ax, place_x
			mov cx, place_y
			call FINDPLACE
			mov bx, ax

			pop cx
			pop ax

			mov ah, 0dh
			mov si, Message_offset
			mov di, VIDEOSEC
			mov es, di
				
			mov di, bx
			cld

PRINTINGCYCLE:	
			int 3
			lodsb
			cmp al, '$'
			je DOBREAK
			int 3
			stosw
			; int 3
			jmp PRINTINGCYCLE

DOBREAK:	pop bp
			ret
PRINTMESSAGE	endp




;variables
Message_16		db, '16 sys', '$'
MesLen_16		dw $-Message_16

Message_8		db, '8 sys', '$'
MesLen_8		dw $-Message_8

Message_2		db, '2 sys', '$'
MesLen_2		dw $-Message_2

Message_10		db, '10 sys', '$'
MesLen_10		dw $-Message_10

End		Start
