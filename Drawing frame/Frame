.model tiny
.code
.386

VIDEOSEC		equ 0b800h
GLOBALFRAMELEN	equ 160
WORDLEN			equ 2
MAXSIZE			equ 80
SUBUP			equ 1
SUBLEFT			equ 5
SUBOFFSET		equ 5
TOWORD			equ 2

MAXLEN			equ 160
MAXWIDTH		equ 40

CENTER			equ 160*5 + 2*8

LEFTHIGHCORN	equ 0000
RIGHTDOWNCORN	equ 184fh
BGCOLOR			equ 07h

DURATION		equ 0ffh

Lefthighcorner	equ 0dc9h
Horisontal		equ 0dcdh
Righthighcorner	equ 0dbbh
Leftlowcorner	equ 0dc8h
Vertical		equ 0dbah
Rightlowcorner	equ 0dbch
Thefilling		equ 00bch
Theshadow		equ 07fb1h

Leftoffset		equ 3
Upoffset		equ 3

Number_to_convert equ 0edah

org 100h
Start:		
		call CLEANSCREEN

		mov ax, Upoffset
		mov dx, Leftoffset
		
		push ax
		push dx
		push 36
		push 34
		push Rightlowcorner
		push Leftlowcorner
		push Theshadow
		push Thefilling
		push Vertical
		push Righthighcorner
		push Horisontal
		push Lefthighcorner
		call ANIMATION
		add sp, 12 * 2

		mov ah, 086h
		mov cx, 01h
		mov dx, 8480h
		int 15h

		
		push 4
		push 4
		push 30
		push 4
		push Rightlowcorner
		push Leftlowcorner
		push Theshadow
		push Thefilling
		push Vertical
		push Righthighcorner
		push Horisontal
		push Lefthighcorner
		call ANIMATION
		add sp, 12 * 2

		mov ah, 086h
		mov cx, 01h
		mov dx, 8480h
		int 15h

		push 4 5 MesLen_16 offset Message_16
		call PRINTMESSAGE
		add sp, 4 * 2

		;int 3

		push Number_to_convert
		push 5
		push 5
		push 0Fh
		push 4
		call BIT_CONVERTER
		add sp, 5 * 2

		push 8
		push 4
		push 30
		push 4
		push Rightlowcorner
		push Leftlowcorner
		push Theshadow
		push Thefilling
		push Vertical
		push Righthighcorner
		push Horisontal
		push Lefthighcorner
		call ANIMATION
		add sp, 12 * 2

		mov ah, 086h
		mov cx, 01h
		mov dx, 8480h
		int 15h

		push 8 5 MesLen_8 offset Message_8
		call PRINTMESSAGE
		add sp, 4 * 2

		push Number_to_convert
		push 9
		push 5
		push 07h
		push 3
		call BIT_CONVERTER
		add sp, 5 * 2


		push 12
		push 4
		push 30
		push 4
		push Rightlowcorner
		push Leftlowcorner
		push Theshadow
		push Thefilling
		push Vertical
		push Righthighcorner
		push Horisontal
		push Lefthighcorner
		call ANIMATION
		add sp, 12 * 2

		mov ah, 086h
		mov cx, 01h
		mov dx, 8480h
		int 15h

		push 12 5 MesLen_2 offset Message_2
		call PRINTMESSAGE
		add sp, 4 * 2

		push Number_to_convert
		push 13
		push 5
		push 01h
		push 1
		call BIT_CONVERTER
		add sp, 5 * 2


		push 16
		push 4
		push 30
		push 4
		push Rightlowcorner
		push Leftlowcorner
		push Theshadow
		push Thefilling
		push Vertical
		push Righthighcorner
		push Horisontal
		push Lefthighcorner
		call ANIMATION
		add sp, 12 * 2

		mov ah, 086h
		mov cx, 01h
		mov dx, 8480h
		int 15h

		push 16 5 MesLen_10 offset Message_10
		call PRINTMESSAGE
		add sp, 4 * 2

		push Number_to_convert
		push 17
		push 5
		call CONVERTER_10
		add sp, 3 * 2

		mov ah, 086h
		mov cx, 1h
		mov dx, 8480h
		int 15h

		mov ax, 4c00h
		int 21h

BIT_CONVERTER	proc system_to_convert, convertion_mask, x_coordinate, y_coordinate, bit_number

				; pop ax
				; push bp
				; push ax
				push bp
				mov bp, sp
				push cx
				
				mov di, VIDEOSEC
				mov es, di
				;mov di, CENTER

				push y_coordinate
				push x_coordinate
				call FINDPLACE
				add sp, 2 * 2
				mov di, ax

				mov dx, bit_number
				xor cx, cx

				std
CONTINUE_COUNTING:
				
				mov ax, dx
				and ax, convertion_mask

				;mov ah, 0dh

				;stosw
				;call debug
				push cx

				mov cl, byte ptr system_to_convert
				shr dx, cl

				pop cx
				inc cx

				cmp dx, 0
				ja CONTINUE_COUNTING


				mov dx, bit_number
				add di, cx
				add di, cx
CONTINUE_CONVERTING_16:
				
				mov ax, dx
				and ax, convertion_mask

				mov ah, 0dh

				cmp al, 9
				ja ADD_LETTER
				add al, '0'
				jmp GO_AWAY
ADD_LETTER:		add al, 'A' - 10
GO_AWAY:
				stosw
				;call debug

				mov cl, byte ptr system_to_convert
				shr dx, cl

				cmp dx, 0
				ja CONTINUE_CONVERTING_16

				; pop dx
				pop cx
				pop bp
				; push dx	

				ret
BIT_CONVERTER	endp


CONVERTER_10	proc x_coordinate, y_coordinate, the_number

				; pop ax
				; push bp
				; push ax
				push bp
				mov bp, sp
				push cx
				
				mov di, VIDEOSEC
				mov es, di
				;mov di, CENTER

				push y_coordinate
				push x_coordinate
				call FINDPLACE
				add sp, 2 * 2
				mov di, ax

				mov ax, the_number
				xor cx, cx

				std
CONTINUE_COUNTING_DIJITS:
				
				push cx
				
				xor dx, dx
				mov bx, 10
				div bx

				pop cx
				inc cx

				cmp ax, 0
				ja CONTINUE_COUNTING_DIJITS


				mov ax, the_number
				add di, cx
				add di, cx
CONTINUE_CONVERTING_10:
				
				xor dx, dx
				mov bx, 10
				div bx
				
				push ax
				mov ax, dx
				mov ah, 0dh

				add al, '0'
				
				stosw
				;call debug
				pop ax
				cmp ax, 0
				ja CONTINUE_CONVERTING_10

				; pop dx
				pop cx
				pop bp
				; push dx	

				ret
CONVERTER_10	endp		


MAXIMUM		proc number_1, number_2
			push bp

			mov bp, sp

			mov cx, number_1
			mov dx, number_2
			cmp cx, dx
			jae FIRST_BIGGER

SECOND_BIGGER:
			mov ax, dx
			jmp END_MAX

FIRST_BIGGER:	
			mov ax, cx

END_MAX:	pop bp
			ret
MAXIMUM		endp




ANIMATION	proc Left1, Horizontal_Symb, Right1, Vertical_Symb, Filling_Symb, Shadow_Symb, Left2, Right2, Frame_Height, Frame_Width, Point_x, Point_y

			push bp
			mov bp, sp

			mov ax, Frame_Height
			shr ax, 1			;ax = Frame_Height/2
			push ax				;ax = bp - 2

			mov ax, Frame_Width
			shr ax, 1			;ax = Frame_Width/2
			push ax

			push Frame_Width
			push Frame_Height
			call MAXIMUM
			add sp, 2 * 2

			mov cx, ax

			mov dx, 1				;current width
			mov ax, 1			;current height

ANIMATION_LOOP:	
			push dx
			push ax
			; mov ax, [bp-2]
			; mov dx, [bp-4]
			push cx

			;int 3
			push Point_y
			push Point_x
			push ax
			push dx
			push Right2
			push Left2
			push Shadow_Symb
			push Filling_Symb
			push Vertical_Symb
			push Right1
			push Horizontal_Symb
			push Left1
			call DRAWFRAME
			add sp, 12 * 2 

			;int 3

			pop cx
			pop ax
			pop dx

			;int 3

			cmp ax, [bp-2]
			;jbe MOVE_UP
			jae NEXT_CMP
 
MOVE_UP:	inc ax
			
NEXT_CMP:	cmp dx, [bp-4]
			;jbe MOVE_LEFT
			jae END_CMP

MOVE_LEFT:	inc dx

END_CMP:
			;int 3

			push ax
			push cx
			push dx

			; mov ah, 086h
			; mov cx, 01h
			; mov dx, 8480h
			; int 15h	

			pop dx
			pop cx
			pop ax

			;int 3
			
			loop ANIMATION_LOOP	

			pop ax
			pop ax
			pop bp
			
			;int 3
			ret
ANIMATION	endp


DRAWFRAME	proc Lefthigh, Thehorisontal, Righthigh, Thevertical, Filling, Theshadowparam, Leftlow, Rightlow, Thelength, Thewidth, Theleftoffset, Theupoffset
		push bp
		mov bp, sp

		;call CLEANSCREEN		

		mov bx, VIDEOSEC
		mov es, bx

		push Theupoffset
		push Theleftoffset
		push Thelength
		push Righthigh
		push Horisontal
		push Lefthigh
		call LINE
		add sp, 6 * 2

		mov cx, Thewidth
		;int 3
STARTLOOP:	
		inc Theupoffset

		push cx

		push Theupoffset
		push Theleftoffset
		push Thelength
		push Thevertical
		push Filling
		push Thevertical
		call LINE
		add sp, 6 * 2

		call GONEXT
		mov ax, Theshadowparam
		call PRINTSYMBOL

		pop cx
		;int 3
		loop STARTLOOP


		push Theupoffset
		push Theleftoffset
		push Thelength
		push Rightlow
		push Horisontal
		push Leftlow
		call LINE
		add sp, 6 * 2	

		call GONEXT
		mov ax, Theshadowparam
		call PRINTSYMBOL

		inc Theleftoffset
		inc Theupoffset

		push Theupoffset
		push Theleftoffset
		push Thelength
		push Theshadowparam
		push Theshadowparam
		push Theshadowparam
		call LINE
		add sp, 6 * 2	
		
		pop bp	
		
		ret	
DRAWFRAME	endp



;prints the line of symbols we put in stack
;ax, cx, dx spoiled
LINE		proc Left, Thehorisontalsymb, Right, Thelen, Theleftoffset, Theupoffset
		
			push bp
			mov bp, sp

			push Theupoffset
			push Theleftoffset	
			call FINDPLACE
			add sp, 2 * 2

			mov bx, ax

			mov cx, Thelen
			
			mov ax, Left
			call PRINTSYMBOL

			mov ax, Thehorisontalsymb
			
LINECYC:	
			call GONEXT

			call PRINTSYMBOL
			;int 3
			loop LINECYC

			mov ax, Right
			call PRINTSYMBOL

			pop bp

			ret
LINE		endp



;moves Where to the next word
GONEXT		proc
			add bx, WORDLEN

			ret
GONEXT		endp




;moves Where to the previous word
GOBACK		proc
			sub bx, WORDLEN

			ret
GOBACK		endp



;sets Where to the place on the screen according to Upoffset and Leftoffset
;ax, cx, dx spoiled
;result in ax 
FINDPLACE	proc Theleftoffset, Theupoffset
			push bp
			mov bp, sp

			push bx
			
			mov ax, Theleftoffset
			
			mov cx, WORDLEN
			mul cx
		
			mov bx, ax
			
			mov ax, Theupoffset
			
			mov cx, GLOBALFRAMELEN
			mul cx
			
			add ax, bx
			pop bx
			
			pop bp

			ret
FINDPLACE	endp




;prints the symbol that was put in stack
;ax, dx are spoiled
PRINTSYMBOL	proc near

		mov es:[bx], ax

		ret
PRINTSYMBOL	endp



;cleans the screen
CLEANSCREEN	proc near
		
		push ax
		push bx
		push cx
		push dx

		mov ax, 0600h
		mov bh, BGCOLOR
		mov cx, LEFTHIGHCORN
		mov dx, RIGHTDOWNCORN	
		int 10h

		pop dx
		pop cx
		pop bx
		pop ax

		ret
CLEANSCREEN	endp




;delays the work of program on abt 0.5 seconds
;cx, dx are spoiled
DELAY		proc near
		
			mov cx, DURATION
OUTCYCLE:	mov dx, DURATION
INNING:		cmp dx, 0
			je STOP
			dec dx
			jmp INNING
STOP:		loop OUTCYCLE
		

			ret
DELAY		endp




;prints the whole message by addressing to videomemory
PRINTMESSAGE	proc Message_offset, MesLen, place_x, place_y
			push bp
			mov bp, sp
			
			push place_y
			push place_x
			call FINDPLACE
			add sp, 2 * 2
			mov bx, ax

			mov ah, 0dh
			mov si, Message_offset
			mov di, VIDEOSEC
			mov es, di
				
			mov di, bx
			cld

PRINTINGCYCLE:	
			lodsb
			cmp al, '$'
			je DOBREAK
			stosw
			int 3
			jmp PRINTINGCYCLE

DOBREAK:	pop bp
			ret
PRINTMESSAGE	endp




;variables
Message_16		db, '16 sys', '$'
MesLen_16		dw $-Message_16

Message_8		db, '8 sys', '$'
MesLen_8		dw $-Message_8

Message_2		db, '2 sys', '$'
MesLen_2		dw $-Message_2

Message_10		db, '10 sys', '$'
MesLen_10		dw $-Message_10

End		Start
